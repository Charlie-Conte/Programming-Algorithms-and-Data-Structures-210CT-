package week7;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Stack;
import java.util.Vector;

import main.Manager.Tasks;
import week7.Graph.Node;


public class task2 implements Tasks 
{
	@Override
	
	
	public void run()
	{
		Stack<Node> nStack = new Stack<Node>();
		String out = "";

		task1Copy();
		
		Node start = test.GetNode(3);
		start.visited=true;
		
		nStack.push(start);
		out = out + start.value + "\t";
		while(!nStack.isEmpty())
		{	
			start = nStack.pop();
			
			for (int p = 0; p < start.ConnectedNodes.size();p++)
			{
				Node current = test.GetNode(start.ConnectedNodes.get(p));
				
				if (current.visited == false)
				{
					current.visited = true;
					nStack.push(current);
					out = out + current.value + "\t";
				}
			}
			
		}
		
		
		
		File explanation = new File(System.getProperty("user.dir").replaceAll("\\\\", "\\\\\\\\") + "\\PsuedoCode&Text_Tasks\\" + "210CT Week 7 Coursework TASK 2 output.txt");
		FileWriter writer = null;
		
		try 
		{
			writer = new FileWriter(explanation);
			writer.write(out);
		   
		} catch (Exception e) {
			// TODO: the flop
		}
		finally 
		{
			if (writer != null) try { writer.close(); } catch (IOException ignore) {}
		}
		
		
		main.Manager.consoleSpace(1);
		System.out.println("open output text file  y / n");
		String choice = main.Manager.read.next();
		if (choice.equals("y")) main.openText.openPsuedoCode("210CT Week 7 Coursework TASK 2 output.txt");
		
		
		System.out.println("Rerun Code  y / n");
		String choice2 = main.Manager.read.next();
		if (choice2.equals("y")) run();	
	}
	
	
	public void task1Copy()
	{
		
		
		test.addNode(0);
		test.addNode(1);
		test.addNode(2);
		test.addNode(3);
		test.addNode(4);
		test.addNode(5);
		test.addNode(6);
		test.addNode(7);
		test.addNode(8);
		test.addNode(9);
		test.addNode(10);
		test.addNode(11);
		test.addNode(12);
		
		test.addEdge(0, 1);
		test.addEdge(0, 2);
		test.addEdge(0, 3);
		test.addEdge(1,4);
		test.addEdge(1,5);
		test.addEdge(1,6);
		test.addEdge(2,7);
		test.addEdge(3,8);
		test.addEdge(3,9);
		test.addEdge(8,10);
		test.addEdge(8,11);
		test.addEdge(8,12);

		
		
		
		//displays node value and connected nodes
		System.out.println("Node:\t" + test.GetNode(3).value + "\t connected nodes: " + test.GetNode(3).ConnectedNodes.toString());
		System.out.println("Node:\t" + test.GetNode(13).value + "\t connected nodes: " + test.GetNode(13).ConnectedNodes.toString());	
		System.out.println("Node:\t" + test.GetNode(22).value + "\t connected nodes: " + test.GetNode(22).ConnectedNodes.toString());
		System.out.println("Node:\t" + test.GetNode(23).value + "\t connected nodes: " + test.GetNode(23).ConnectedNodes.toString());	
		System.out.println("Node:\t" + test.GetNode(123).value + "\t connected nodes: " + test.GetNode(123).ConnectedNodes.toString());
		System.out.println("Node:\t" + test.GetNode(111).value + "\t connected nodes: " + test.GetNode(111).ConnectedNodes.toString());
		System.out.println("Node:\t" + test.GetNode(213).value + "\t connected nodes: " + test.GetNode(213).ConnectedNodes.toString());	
		System.out.println("Node:\t" + test.GetNode(112).value + "\t connected nodes: " + test.GetNode(112).ConnectedNodes.toString());
		System.out.println("Node:\t" + test.GetNode(35).value + "\t connected nodes: " + test.GetNode(35).ConnectedNodes.toString());
		System.out.println("Node:\t" + test.GetNode(153).value + "\t connected nodes: " + test.GetNode(153).ConnectedNodes.toString());
		System.out.println("Node:\t" + test.GetNode(522).value + "\t connected nodes: " + test.GetNode(522).ConnectedNodes.toString());
		System.out.println("Node:\t" + test.GetNode(253).value + "\t connected nodes: " + test.GetNode(253).ConnectedNodes.toString());
	

	}
	public Graph test = new Graph();
}
