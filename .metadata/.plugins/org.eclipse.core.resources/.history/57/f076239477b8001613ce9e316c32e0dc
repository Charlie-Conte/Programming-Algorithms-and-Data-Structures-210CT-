package week6;



public class BinarySearchTreeSort
{
	public static BinTreeNode tree_insert(BinTreeNode tree, int item)
	{
	  if (tree == null)
	  {
		tree = new BinTreeNode(item);
	  }
	  else
	  {
		if (item < tree.value)
		{
		  if (tree.left == null)
		  {
			tree.left = new BinTreeNode(item);
		  }
		  else
		  {
			tree_insert(tree.left, item);
		  }
		}
		else
		{
		  if (tree.right == null)
		  {
			tree.right = new BinTreeNode(item);
		  }
		  else
		  {
			tree_insert(tree.right, item);
		  }
		}
	  }
	  return tree;

	}

	public static void postorder(BinTreeNode tree)
	{
	  if (tree.left != null)
	  {
		postorder(tree.left);
	  }
	  if (tree.right != null)
	  {
		postorder(tree.right);
	  }
	  System.out.print(tree.value);
	  System.out.print("\n");

	}

	public static void in_order(BinTreeNode tree)
	{
	  if (tree.left != null)
	  {
		in_order(tree.left);
	  }
	  System.out.print(tree.value);
	  System.out.print("\n");
	  if (tree.right != null)
	  {
		in_order(tree.right);
	  }
	}

	public static void test()
	{
	  BinTreeNode t = tree_insert(new BinTreeNode(0), 6);
	  tree_insert(t, 10);
	  tree_insert(t, 5);
	  tree_insert(t, 2);
	  tree_insert(t, 3);
	  tree_insert(t, 4);
	  tree_insert(t, 11);
	  in_order(t);
	  
	  
	  System.out.print(t.right.value);
	  main.Manager.read.nextLine();
	}
}


class BinTreeNode
{
  public BinTreeNode(int value)
  {
	this.value = value;
	this.left = null;
	this.right = null;
  }
  public int value;
  public BinTreeNode left;
  public BinTreeNode right;

}

/*package week6;

public class BinarySearchTreeSort
{

	public static Node root;// base of search tree
	public BinarySearchTreeSort()
	{
		this.root = null;
	}
	


	
	
	
	
	
}
class Node
{
	int content;
	Node left;
	Node right;
	public Node(int content)
	{
		this.content = content;
		left = null;
		right = null;
	}
	
}
*/
